# coding: utf-8
import sys
import base64

import cv2
import numpy as np
from keras import models

from ocr import pretreatment
from ocr.mlearn_for_image import preprocess_input
import random
import math
from py12306.config import Config
import threading
from  keras.backend.tensorflow_backend import _SYMBOLIC_SCOPE
def get_text(img, offset=0):
    text = pretreatment.get_text(img, offset)
    text = cv2.cvtColor(text, cv2.COLOR_BGR2GRAY)
    text = text / 255.0
    h, w = text.shape
    text.shape = (1, h, w, 1)
    return text

def ocr(base64_data):
    # 读取并预处理验证码
    #设置当前线程
    _SYMBOLIC_SCOPE.value=True
    imgData = base64.b64decode(base64_data)
    nparr = np.fromstring(imgData, np.uint8)
    img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
    #img = cv2.imread(fn)
    #获取文字
    text = get_text(img)

    imgs = np.array(list(pretreatment._get_imgs(img)))
    imgs = preprocess_input(imgs)

    # 模型数据
    model = models.load_model(Config.PROJECT_DIR+'model_data/model.h5')
    #用模型判断这个文字
    label = model.predict(text)
    #获取相似度最大的
    label = label.argmax()
    #获取所有text
    fp = open(Config.PROJECT_DIR+'model_data/texts.txt', encoding='utf-8')
    texts = [text.rstrip('\n') for text in fp]
    #使用相似度最大的
    text = texts[label]
    keyWord=[]
    keyWord.append(text)
    print(keyWord)

    # 获取下一个词
    # 根据第一个词的长度来定位第二个词的位置
    if len(text) == 1:
        offset = 27
    elif len(text) == 2:
        offset = 47
    else:
        offset = 60
    #类似的，获取第二个词
    text = get_text(img, offset=offset)
    if text.mean() < 0.95:
        label = model.predict(text)
        label = label.argmax()
        text = texts[label]
        keyWord.append(text)
        print(keyWord)

    # 加载图片分类器
    model = models.load_model(Config.PROJECT_DIR+'model_data/_12306.image.model.h5')
    labels = model.predict(imgs)
    labels = labels.argmax(axis=1)
    # for pos, label in enumerate(labels):
    #     print(pos // 4, pos % 4, texts[label])
    result=[]
    for pos, label in enumerate(labels):
        print(texts[label])
        if texts[label] in keyWord:
            result.append(pos)
            #print(pos // 4, pos % 4, texts[label])
    print (result)
    return get_image_position_by_offset(result)
#32,36, 110,44, 197,44, 258,40, 39,112, 114,113, 185,110, 264,112
#30,30, 110,30, 190,30, 270,30, x加80,统一40
# 30,110, 110,110, 190,110, 270,110  x加80 ，y统一120
def get_image_position_by_offset(offsets):
    positions = []
    interval=80
    rowOneY=40
    rowTwoY=120
    start=40
    width = 75
    height = 75
    for offset in offsets:
        # 生成偏移量，防止被认为爬虫
        random_x = random.randint(-5, 5)
        random_y = random.randint(-5, 5)
        if offset < 4:
            offset = int(offset)
            x=start+offset*interval+random_x
            y=rowOneY+random_y
        else:
            offset = int(offset-4)
            x=start+offset*interval+random_x
            y=rowTwoY+random_y
        positions.append(int(x))
        positions.append(int(y))
    return positions

    return positions
if __name__ == '__main__':
    strr="" \
         "3BV628OWFqAIokX6LiteigCCG1SFiyjqMdKnoooAKKKKACiiigAAACAAsQsafAobuQsgICEgsAD/2QoK"
    result=ocr(strr)
    print(result)
